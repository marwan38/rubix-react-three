{"version":3,"sources":["keys.js","material.js","utils.js","constants.js","Canvas.js","Controls.js","App.js","serviceWorker.js","index.js"],"names":["keys","q","w","e","Material","props","vertexShader","fragmentShader","uniforms","color","type","value","side","DoubleSide","ShaderMaterial","roundHalf","num","Math","round","GROUP_COLORS","0","1","2","3","4","5","Symbol","extend","OrbitControls","Cube","forwardRef","ref","rest","group","Array","fill","map","_","i","rotation","Vector3","position","setX","PI","setY","CUBE_SIZE","setZ","hex","result","exec","parseInt","hexToRgb","material","CubixMaterial","mesh","key","index","toArray","attach","args","Rubix","sides","cubeRefs","useRef","undefined","active","dir","moveQueue","lastMove","useState","duration","useSprings","floor","getPositionByIndex","config","springs","set","processMove","keyCode","event","checkKey","code","codeOrKey","current","handleSideSelection","cubesToMove","forEach","cube","z","push","uuid","y","x","indexOf","newPos","clone","newRotation","matrix","Matrix4","makeRotationZ","makeRotationY","makeRotationX","applyMatrix4","multiply","setFromRotationMatrix","addToQueue","useEffect","window","addEventListener","removeEventListener","useFrame","length","now","Date","move","shift","Scene","useThree","camera","domElement","gl","AppCanvas","Controls","setActive","transitions","useTransition","from","transform","opacity","height","enter","leave","style","top","left","onClick","item","div","className","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.573e2127.chunk.js","sourcesContent":["export const keys = {\r\n  \"-\": 189,\r\n  \"+\": 187,\r\n  q: 81,\r\n  w: 87,\r\n  e: 69,\r\n  \"1\": 49,\r\n  \"2\": 50,\r\n  \"3\": 51\r\n};\r\n\r\nexport function isPressed(event) {\r\n  return code => {\r\n    const codeOrKey = typeof code === 'string' ? keys[code] : code;\r\n    if (typeof event === \"number\") return event === codeOrKey;\r\n    return event.keyCode === codeOrKey;\r\n  };\r\n}\r\n","import {ShaderMaterial, DoubleSide} from 'three';\r\nclass Material extends ShaderMaterial {\r\n    constructor(props) {\r\n        super({\r\n            vertexShader: `\r\n            varying vec2 vUv;\r\n            void main() {\r\n                vUv = uv;\r\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n            }\r\n        `,\r\n          fragmentShader: `\r\n                uniform vec3 color;\r\n                varying vec2 vUv;\r\n\r\n                vec2 stroke(vec2 p, float w) {\r\n                    return step(vec2(w), p) * step(vec2(w), 1.0 - p);\r\n                }\r\n\r\n                void main() {\r\n                    float c = 1.0;\r\n                    vec2 s = stroke(vUv, 0.05);\r\n                    c *= s.x * s.y;\r\n                    gl_FragColor = vec4(color * c, 1.0);\r\n                }\r\n              `,\r\n          uniforms: {\r\n            color: {type: 'vec3', value: props.color || [0, 0, 0]}\r\n          },\r\n          side: DoubleSide\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Material;\r\n","/** Keeps numbers in check by rounding to nearest 0.5 */\r\nexport function roundHalf(num) {\r\n  return Math.round(num * 2) / 2;\r\n}\r\n/** Converts HEX to Normalized RGB */\r\nexport function hexToRgb(hex) {\r\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return result\r\n    ? [\r\n        parseInt(result[1], 16) / 255,\r\n        parseInt(result[2], 16) / 255,\r\n        parseInt(result[3], 16) / 255\r\n      ]\r\n    : null;\r\n}\r\n/** Returns type of cubix. Ie: edge, corner, or center */\r\nexport function getCubeType(position) {\r\n  const [x, y, z] = position;\r\n  if (x === 0.5 && y === 0.5) return \"center\";\r\n  else if ((x === 0 || x === 1) && (y === 0 || y === 1)) return \"corner\";\r\n  else return \"edge\";\r\n}"," \r\n/**  Size of the individual cube */\r\nexport const CUBE_SIZE = 0.5;\r\n/** How many rows/colums the cube has */\r\nexport const RUBIX_AMOUNT = 3;\r\n/** Color by group\r\n * Top, right, bottom, left, front, back\r\n */\r\nexport const GROUP_COLORS = {\r\n  0: \"#FFFFFF\",\r\n  1: \"#b71234\",\r\n  2: \"#ffd500\",\r\n  3: \"#ff5800\",\r\n  4: \"#009b48\",\r\n  5: \"#0046ad\"\r\n};\r\n/** Key for cube to keep prev location ref */\r\nexport const __prev__ = Symbol(\"prev-position\");\r\nexport const __next__ = Symbol(\"next-position\");","import React, { useState, useRef, useEffect, forwardRef } from \"react\";\r\nimport { Canvas, useFrame, extend, useThree } from \"react-three-fiber\";\r\nimport { Vector3, Matrix4, DoubleSide } from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { useSprings, animated as a } from \"react-spring/three\";\r\nimport { keys, isPressed } from \"./keys\";\r\nimport CubixMaterial from \"./material\";\r\nimport {\r\n  roundHalf,\r\n  hexToRgb\r\n} from \"./utils\";\r\n\r\nimport {\r\n  CUBE_SIZE,\r\n  RUBIX_AMOUNT,\r\n  GROUP_COLORS,\r\n} from \"./constants\";\r\n\r\nextend({ OrbitControls });\r\n\r\nconst Cube = forwardRef(({ ...rest }, ref) => {\r\n  return (\r\n    <a.group {...rest} ref={ref}>\r\n      {new Array(6).fill().map((_, i) => {\r\n        // Draws each face of the cube\r\n        // really, we should be only drawing what is needed\r\n        // but whatever\r\n        let rotation = new Vector3();\r\n        const position = new Vector3();\r\n        if (i === 0) {\r\n          rotation.setX(-Math.PI / 2);\r\n          position.setY(CUBE_SIZE / 2);\r\n        } else if (i === 1) {\r\n          rotation.setY(Math.PI / 2);\r\n          position.setX(CUBE_SIZE / 2);\r\n        } else if (i === 2) {\r\n          rotation.setX(Math.PI / 2);\r\n          position.setY(-CUBE_SIZE / 2);\r\n        } else if (i === 3) {\r\n          rotation.setY(-Math.PI / 2);\r\n          position.setX(-CUBE_SIZE / 2);\r\n        } else if (i === 4) {\r\n          rotation.setZ(Math.PI / 2);\r\n          position.setZ(CUBE_SIZE / 2);\r\n        } else if (i === 5) {\r\n          rotation.setZ(-Math.PI / 2);\r\n          position.setZ(-CUBE_SIZE / 2);\r\n        }\r\n        const color = hexToRgb(GROUP_COLORS[i]);\r\n        const material = new CubixMaterial({ color });\r\n\r\n        return (\r\n          <a.mesh\r\n            key={rest.index + \"-\" + i}\r\n            rotation={rotation.toArray()}\r\n            position={position.toArray()}\r\n          >\r\n            <planeBufferGeometry\r\n              attach=\"geometry\"\r\n              args={[CUBE_SIZE, CUBE_SIZE, 1]}\r\n            />\r\n\r\n            <shaderMaterial\r\n              attach=\"material\"\r\n              args={[material]}\r\n              side={DoubleSide}\r\n            />\r\n          </a.mesh>\r\n        );\r\n      })}\r\n    </a.group>\r\n  );\r\n});\r\n\r\n/** Returns starting cube coords */\r\nfunction getPositionByIndex(i) {\r\n  const offset = CUBE_SIZE;\r\n  const x = (i % RUBIX_AMOUNT) * CUBE_SIZE - offset;\r\n  const y = Math.floor((i / RUBIX_AMOUNT) % RUBIX_AMOUNT) * CUBE_SIZE - offset;\r\n  const z = Math.floor(i / RUBIX_AMOUNT ** 2) * CUBE_SIZE - offset;\r\n  return [x, y, z];\r\n}\r\n\r\nfunction Rubix() {\r\n  const sides = RUBIX_AMOUNT ** 2 * RUBIX_AMOUNT;\r\n  /** Ref to all the cubicles */\r\n  const cubeRefs = useRef(new Array(sides).fill(undefined));\r\n  /** Which side is selected. Uses the coords system */\r\n  const active = useRef(-0.5);\r\n  /** Direction of spin. 1 or -1 */\r\n  const dir = useRef(1);\r\n  /** A queue storing key presses\r\n   * so we always make sure transformations are done\r\n   * on time and not earlier.\r\n   * This avoid translation issues if user\r\n   * tries to rotate while it's in mid rotation\r\n   */\r\n  const moveQueue = useRef([]);\r\n  const lastMove = useRef(0);\r\n  const [duration, setDuration] = useState(250);\r\n  \r\n  /** Set up transition */\r\n  const [springs, set] = useSprings(sides, i => {\r\n    const position = getPositionByIndex(i);\r\n    return {\r\n      position,\r\n      rotation: [0, 0, 0],\r\n      config: { duration }\r\n    };\r\n  });\r\n\r\n  /** Manages key press for side selection and rotation direction */\r\n  function handleSideSelection(keyCode) {\r\n    switch (keyCode) {\r\n      case keys[\"1\"]:\r\n        active.current = -0.5;\r\n        break;\r\n      case keys[\"2\"]:\r\n        active.current = 0;\r\n        break;\r\n      case keys[\"3\"]:\r\n        active.current = 0.5;\r\n        break;\r\n      case keys[\"-\"]:\r\n        dir.current = -1;\r\n        break;\r\n      case keys[\"+\"]:\r\n        dir.current = 1;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /** Processes key press */\r\n  const processMove = keyCode => {\r\n    const checkKey = isPressed({ keyCode });\r\n    handleSideSelection(keyCode);\r\n\r\n    if (checkKey(keys.q) || checkKey(keys.w) || checkKey(keys.e)) {\r\n      const cubesToMove = [];\r\n\r\n      cubeRefs.current.forEach(cube => {\r\n        if (checkKey(keys.q) && cube.position.z === active.current) {\r\n          cubesToMove.push(cube.uuid);\r\n        } else if (checkKey(keys.w) && cube.position.y === active.current) {\r\n          cubesToMove.push(cube.uuid);\r\n        } else if (checkKey(keys.e) && cube.position.x === active.current) {\r\n          cubesToMove.push(cube.uuid);\r\n        }\r\n      });\r\n\r\n      set(i => {\r\n        const cube = cubeRefs.current[i];\r\n\r\n        // Keep the untouched cubes where they are\r\n        if (cubesToMove.indexOf(cube.uuid) < 0) {\r\n          return;\r\n        }\r\n\r\n        const newPos = cube.position.clone();\r\n        const newRotation = cube.rotation.clone();\r\n        const matrix = new Matrix4();\r\n        const rotation = (Math.PI / 2) * dir.current;\r\n\r\n        if (checkKey(keys.q)) {\r\n          matrix.makeRotationZ(rotation);\r\n        } else if (checkKey(keys.w)) {\r\n          matrix.makeRotationY(rotation);\r\n        } else if (checkKey(keys.e)) {\r\n          matrix.makeRotationX(rotation);\r\n        }\r\n        newPos.applyMatrix4(matrix);\r\n        matrix.multiply(cube.matrix);\r\n        newRotation.setFromRotationMatrix(matrix);\r\n\r\n        return {\r\n          position: newPos.toArray().map(roundHalf),\r\n          rotation: newRotation.toArray()\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  function addToQueue({ keyCode }) {\r\n    moveQueue.current.push(keyCode);\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", addToQueue);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", addToQueue);\r\n    };\r\n  }, []);\r\n\r\n  useFrame(() => {\r\n    if (moveQueue.current.length) {\r\n      const now = Date.now();\r\n      if (now - lastMove.current > duration*1.25) {\r\n        lastMove.current = now;\r\n        const move = moveQueue.current.shift();\r\n        processMove(move);\r\n      }\r\n    }\r\n  });\r\n\r\n  return springs.map((props, i) => {\r\n    // const position = getPositionByIndex(i);\r\n\r\n    // const type = getCubeType(position);\r\n    // const belongsToGroup = getGroupNumberByPosition(position);\r\n\r\n    const key = `cube-${i}`;\r\n    return (\r\n      <Cube\r\n        {...props}\r\n        key={key}\r\n        index={key}\r\n        ref={ref => {\r\n          if (cubeRefs.current[i] === undefined) cubeRefs.current[i] = ref;\r\n        }}\r\n      />\r\n    );\r\n  });\r\n}\r\n\r\nfunction Scene() {\r\n  const {\r\n    camera,\r\n    gl: { domElement }\r\n  } = useThree();\r\n  return (\r\n    <>\r\n      <orbitControls args={[camera, domElement]} />\r\n      <ambientLight />\r\n      <Rubix />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction AppCanvas() {\r\n  return (\r\n    <Canvas>\r\n      <Scene />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default AppCanvas;\r\n","import React, { useState } from \"react\";\r\nimport { useTransition, animated } from \"react-spring\";\r\n\r\nfunction Controls() {\r\n  const [active, setActive] = useState(false);\r\n  const transitions = useTransition(active, null, {\r\n    from: {\r\n      transform: \"translate3d(0,0px,0)\",\r\n      opacity: 0,\r\n      height: 0,\r\n      position: \"absolute\"\r\n    },\r\n    enter: { transform: \"translate3d(0,25px,0)\", opacity: 1 },\r\n    leave: { transform: \"translate3d(0,0px,0)\", opacity: 0, height: 0 }\r\n  });\r\n\r\n  return (\r\n    <div style={{ position: \"absolute\", top: 25, left: 25 }}>\r\n      <button onClick={() => setActive(!active)}>Show controls</button>\r\n      {transitions.map(({ item, key, props }) => {\r\n        return (\r\n          item && (\r\n            <animated.div style={{ ...props }} key={key}>\r\n              <div style={{ height: \"100%\" }}>\r\n                <h3>Controls</h3>\r\n                <div className=\"instruction\">\r\n                  <b>Q:</b> Rotate front/back\r\n                </div>\r\n                <div className=\"instruction\">\r\n                  <b>W:</b> Rotate bottom/top\r\n                </div>\r\n                <div className=\"instruction\">\r\n                  <b>E:</b> Rotate left/right\r\n                </div>\r\n                <div className=\"instruction\">\r\n                  <b>1~3:</b> Change group being rotated\r\n                </div>\r\n              </div>\r\n            </animated.div>\r\n          )\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","import React, { useRef, useEffect } from 'react'\r\n\r\nimport AppCanvas from './Canvas'\r\nimport Controls from './Controls';\r\n\r\nfunction App () {\r\n  return (\r\n    <div className='App' style={{position: 'relative'}}>\r\n      <AppCanvas />\r\n      <Controls />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}